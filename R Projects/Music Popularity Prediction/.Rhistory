install.packages('IRkernel')
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
summary(mtcars)
setwd("C:/sers/HomePC/Documents/Data Science/R Projects/Music Popularity Prediction")
setwd("C:U/sers/HomePC/Documents/Data Science/R Projects/Music Popularity Prediction")
setwd("C:/Users/HomePC/Documents/Data Science/R Projects/Music Popularity Prediction")
getwd()
# import data
data <- read.csv("songs.csv")
head(data)
colnames(data)
View(data)
# Import libraries
library(dplyr)
# Import libraries
library(dplyr)
# Import libraries
library(tidyverse)
install.packages("tidyverse")
# Import libraries
library(dplyr)
# There is a need to reduce the number of columns from 28 to 18
reduced <- data %>%
select(
track_name,
track_artist,
track_id,
track_popularity,
track_album_release_date,
duration_ms,
spotify_url,
danceability,
energy,
key,
loudness,
mode,
speechiness,
acousticness,
liveness,
valence,
tempo
)
head(reduced)
# infor on the data frame
str(reduced)
library(ggplot2)
colnames(data)
# looping through each feature and plot scatterplots
for (feature in features) {
ggplot(reduced, aes_string(x= feature, y= "track_popularity")) +
geom_point(alpha= 0.5, color= "steelblue") +
ggtitle(paste("Popularity vs", feature)) +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5)) +
labs(x = feature, y = "Popularity") -> p
print(p)
}
features <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"liveness",
"valence",
"tempo",
"duration_ms")
# looping through each feature and plot scatterplots
for (feature in features) {
ggplot(reduced, aes_string(x= feature, y= "track_popularity")) +
geom_point(alpha= 0.5, color= "steelblue") +
ggtitle(paste("Popularity vs", feature)) +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5)) +
labs(x = feature, y = "Popularity") -> p
print(p)
}
View(data)
# Now we begin the exploratory data analysis (EDA) by examining how each key music feature relates to the target variable, popularity
# This will be a visualization of relationship between each feature and popularity
# Defining feature for  the plot
features <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"liveness",
"valence",
"tempo",
"duration_ms")
# looping through each feature and plot scatterplots
for (feature in features) {
ggplot(reduced, aes_string(x= feature, y= "track_popularity")) +
geom_point(alpha= 0.5, color= "steelblue") +
ggtitle(paste("Popularity vs", feature)) +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5)) +
labs(x = feature, y = "Popularity") -> p
print(p)
}
summary(features)
stat(features)
summarize(features)
summarize(features)
str(features)
summary(reduced)
